// snippets.ts - Language snippets configuration

export const LANGUAGE_SNIPPETS: Record<string, any[]> = {
  python: [
    // Print statements
    {
      label: 'print',
      kind: 27,
      documentation: 'Print statement',
      insertText: 'print(${1:value})',
      insertTextRules: 4,
    },
    {
      label: 'printf',
      kind: 27,
      documentation: 'Print with f-string',
      insertText: 'print(f"${1:text} {${2:variable}}")',
      insertTextRules: 4,
    },
    // Control flow
    {
      label: 'for',
      kind: 27,
      documentation: 'For loop',
      insertText: 'for ${1:item} in ${2:iterable}:\n    ${3:pass}',
      insertTextRules: 4,
    },
    {
      label: 'forrange',
      kind: 27,
      documentation: 'For loop with range',
      insertText: 'for ${1:i} in range(${2:n}):\n    ${3:pass}',
      insertTextRules: 4,
    },
    {
      label: 'if',
      kind: 27,
      documentation: 'If statement',
      insertText: 'if ${1:condition}:\n    ${2:pass}',
      insertTextRules: 4,
    },
    {
      label: 'elif',
      kind: 27,
      documentation: 'Elif statement',
      insertText: 'elif ${1:condition}:\n    ${2:pass}',
      insertTextRules: 4,
    },
    {
      label: 'else',
      kind: 27,
      documentation: 'Else statement',
      insertText: 'else:\n    ${1:pass}',
      insertTextRules: 4,
    },
    {
      label: 'while',
      kind: 27,
      documentation: 'While loop',
      insertText: 'while ${1:condition}:\n    ${2:pass}',
      insertTextRules: 4,
    },
    // Functions
    {
      label: 'def',
      kind: 27,
      documentation: 'Function definition',
      insertText: 'def ${1:function_name}(${2:parameters}):\n    """${3:docstring}"""\n    ${4:pass}',
      insertTextRules: 4,
    },
    {
      label: 'lambda',
      kind: 27,
      documentation: 'Lambda function',
      insertText: 'lambda ${1:args}: ${2:expression}',
      insertTextRules: 4,
    },
    // Classes
    {
      label: 'class',
      kind: 27,
      documentation: 'Class definition',
      insertText: 'class ${1:ClassName}:\n    """${2:docstring}"""\n    \n    def __init__(self, ${3:parameters}):\n        ${4:pass}',
      insertTextRules: 4,
    },
    // List operations
    {
      label: 'list',
      kind: 27,
      documentation: 'Create list',
      insertText: '${1:list_name} = [${2:elements}]',
      insertTextRules: 4,
    },
    {
      label: 'append',
      kind: 27,
      documentation: 'List append',
      insertText: '${1:list}.append(${2:item})',
      insertTextRules: 4,
    },
    {
      label: 'extend',
      kind: 27,
      documentation: 'List extend',
      insertText: '${1:list}.extend(${2:iterable})',
      insertTextRules: 4,
    },
    {
      label: 'pop',
      kind: 27,
      documentation: 'List pop',
      insertText: '${1:list}.pop(${2:index})',
      insertTextRules: 4,
    },
    {
      label: 'remove',
      kind: 27,
      documentation: 'List remove',
      insertText: '${1:list}.remove(${2:value})',
      insertTextRules: 4,
    },
    {
      label: 'insert',
      kind: 27,
      documentation: 'List insert',
      insertText: '${1:list}.insert(${2:index}, ${3:value})',
      insertTextRules: 4,
    },
    // Dictionary
    {
      label: 'dict',
      kind: 27,
      documentation: 'Create dictionary',
      insertText: '${1:dict_name} = {${2:key}: ${3:value}}',
      insertTextRules: 4,
    },
    // Exception handling
    {
      label: 'try',
      kind: 27,
      documentation: 'Try-except block',
      insertText: 'try:\n    ${1:pass}\nexcept ${2:Exception} as ${3:e}:\n    ${4:pass}',
      insertTextRules: 4,
    },
    {
      label: 'with',
      kind: 27,
      documentation: 'With statement',
      insertText: 'with ${1:expression} as ${2:variable}:\n    ${3:pass}',
      insertTextRules: 4,
    },
    {
      label: '__main__',
      kind: 27,
      documentation: 'Main guard',
      insertText: 'if __name__ == "__main__":\n    ${1:pass}',
      insertTextRules: 4,
    },
    // Input/Output
    {
      label: 'input',
      kind: 27,
      documentation: 'Get user input',
      insertText: '${1:variable} = input("${2:prompt}")',
      insertTextRules: 4,
    },
    // Comprehensions
    {
      label: 'listcomp',
      kind: 27,
      documentation: 'List comprehension',
      insertText: '[${1:expression} for ${2:item} in ${3:iterable}]',
      insertTextRules: 4,
    },
    {
      label: 'dictcomp',
      kind: 27,
      documentation: 'Dictionary comprehension',
      insertText: '{${1:key}: ${2:value} for ${3:item} in ${4:iterable}}',
      insertTextRules: 4,
    },
  ],
  javascript: [
    // Console methods
    {
      label: 'log',
      kind: 27,
      documentation: 'Console log',
      insertText: 'console.log(${1:value});',
      insertTextRules: 4,
    },
    {
      label: 'error',
      kind: 27,
      documentation: 'Console error',
      insertText: 'console.error(${1:error});',
      insertTextRules: 4,
    },
    {
      label: 'warn',
      kind: 27,
      documentation: 'Console warn',
      insertText: 'console.warn(${1:warning});',
      insertTextRules: 4,
    },
    // Control flow
    {
      label: 'for',
      kind: 27,
      documentation: 'For loop',
      insertText: 'for (let ${1:i} = 0; ${1:i} < ${2:array}.length; ${1:i}++) {\n    ${3:// code}\n}',
      insertTextRules: 4,
    },
    {
      label: 'foreach',
      kind: 27,
      documentation: 'ForEach loop',
      insertText: '${1:array}.forEach(${2:item} => {\n    ${3:// code}\n});',
      insertTextRules: 4,
    },
    {
      label: 'forin',
      kind: 27,
      documentation: 'For...in loop',
      insertText: 'for (const ${1:key} in ${2:object}) {\n    ${3:// code}\n}',
      insertTextRules: 4,
    },
    {
      label: 'forof',
      kind: 27,
      documentation: 'For...of loop',
      insertText: 'for (const ${1:item} of ${2:iterable}) {\n    ${3:// code}\n}',
      insertTextRules: 4,
    },
    {
      label: 'if',
      kind: 27,
      documentation: 'If statement',
      insertText: 'if (${1:condition}) {\n    ${2:// code}\n}',
      insertTextRules: 4,
    },
    {
      label: 'else',
      kind: 27,
      documentation: 'Else statement',
      insertText: 'else {\n    ${1:// code}\n}',
      insertTextRules: 4,
    },
    {
      label: 'elseif',
      kind: 27,
      documentation: 'Else if statement',
      insertText: 'else if (${1:condition}) {\n    ${2:// code}\n}',
      insertTextRules: 4,
    },
    {
      label: 'while',
      kind: 27,
      documentation: 'While loop',
      insertText: 'while (${1:condition}) {\n    ${2:// code}\n}',
      insertTextRules: 4,
    },
    {
      label: 'switch',
      kind: 27,
      documentation: 'Switch statement',
      insertText: 'switch (${1:expression}) {\n    case ${2:value}:\n        ${3:// code}\n        break;\n    default:\n        ${4:// code}\n}',
      insertTextRules: 4,
    },
    // Functions
    {
      label: 'function',
      kind: 27,
      documentation: 'Function declaration',
      insertText: 'function ${1:functionName}(${2:parameters}) {\n    ${3:// code}\n}',
      insertTextRules: 4,
    },
    {
      label: 'arrow',
      kind: 27,
      documentation: 'Arrow function',
      insertText: 'const ${1:functionName} = (${2:parameters}) => {\n    ${3:// code}\n};',
      insertTextRules: 4,
    },
    {
      label: 'async',
      kind: 27,
      documentation: 'Async function',
      insertText: 'async function ${1:functionName}(${2:parameters}) {\n    ${3:// code}\n}',
      insertTextRules: 4,
    },
    // Array methods
    {
      label: 'push',
      kind: 27,
      documentation: 'Array push',
      insertText: '${1:array}.push(${2:item});',
      insertTextRules: 4,
    },
    {
      label: 'pop',
      kind: 27,
      documentation: 'Array pop',
      insertText: '${1:array}.pop();',
      insertTextRules: 4,
    },
    {
      label: 'shift',
      kind: 27,
      documentation: 'Array shift',
      insertText: '${1:array}.shift();',
      insertTextRules: 4,
    },
    {
      label: 'unshift',
      kind: 27,
      documentation: 'Array unshift',
      insertText: '${1:array}.unshift(${2:item});',
      insertTextRules: 4,
    },
    {
      label: 'map',
      kind: 27,
      documentation: 'Array map',
      insertText: '${1:array}.map(${2:item} => ${3:item})',
      insertTextRules: 4,
    },
    {
      label: 'filter',
      kind: 27,
      documentation: 'Array filter',
      insertText: '${1:array}.filter(${2:item} => ${3:condition})',
      insertTextRules: 4,
    },
    {
      label: 'reduce',
      kind: 27,
      documentation: 'Array reduce',
      insertText: '${1:array}.reduce((${2:acc}, ${3:item}) => ${4:acc + item}, ${5:0})',
      insertTextRules: 4,
    },
    // Classes
    {
      label: 'class',
      kind: 27,
      documentation: 'Class definition',
      insertText: 'class ${1:ClassName} {\n    constructor(${2:parameters}) {\n        ${3:// code}\n    }\n}',
      insertTextRules: 4,
    },
    // Error handling
    {
      label: 'try',
      kind: 27,
      documentation: 'Try-catch block',
      insertText: 'try {\n    ${1:// code}\n} catch (${2:error}) {\n    ${3:// handle error}\n}',
      insertTextRules: 4,
    },
    // Promises
    {
      label: 'promise',
      kind: 27,
      documentation: 'Promise',
      insertText: 'new Promise((resolve, reject) => {\n    ${1:// code}\n});',
      insertTextRules: 4,
    },
  ],
  java: [
    // Output
    {
      label: 'sout',
      kind: 27,
      documentation: 'System.out.println',
      insertText: 'System.out.println(${1:value});',
      insertTextRules: 4,
    },
    {
      label: 'print',
      kind: 27,
      documentation: 'System.out.print',
      insertText: 'System.out.print(${1:value});',
      insertTextRules: 4,
    },
    {
      label: 'printf',
      kind: 27,
      documentation: 'System.out.printf',
      insertText: 'System.out.printf("${1:format}", ${2:args});',
      insertTextRules: 4,
    },
    // Control flow
    {
      label: 'for',
      kind: 27,
      documentation: 'For loop',
      insertText: 'for (int ${1:i} = 0; ${1:i} < ${2:length}; ${1:i}++) {\n    ${3:// code}\n}',
      insertTextRules: 4,
    },
    {
      label: 'foreach',
      kind: 27,
      documentation: 'Enhanced for loop',
      insertText: 'for (${1:Type} ${2:item} : ${3:collection}) {\n    ${4:// code}\n}',
      insertTextRules: 4,
    },
    {
      label: 'if',
      kind: 27,
      documentation: 'If statement',
      insertText: 'if (${1:condition}) {\n    ${2:// code}\n}',
      insertTextRules: 4,
    },
    {
      label: 'else',
      kind: 27,
      documentation: 'Else statement',
      insertText: 'else {\n    ${1:// code}\n}',
      insertTextRules: 4,
    },
    {
      label: 'elseif',
      kind: 27,
      documentation: 'Else if statement',
      insertText: 'else if (${1:condition}) {\n    ${2:// code}\n}',
      insertTextRules: 4,
    },
    {
      label: 'while',
      kind: 27,
      documentation: 'While loop',
      insertText: 'while (${1:condition}) {\n    ${2:// code}\n}',
      insertTextRules: 4,
    },
    {
      label: 'switch',
      kind: 27,
      documentation: 'Switch statement',
      insertText: 'switch (${1:expression}) {\n    case ${2:value}:\n        ${3:// code}\n        break;\n    default:\n        ${4:// code}\n}',
      insertTextRules: 4,
    },
    // Methods
    {
      label: 'method',
      kind: 27,
      documentation: 'Method declaration',
      insertText: 'public ${1:void} ${2:methodName}(${3:parameters}) {\n    ${4:// code}\n}',
      insertTextRules: 4,
    },
    {
      label: 'main',
      kind: 27,
      documentation: 'Main method',
      insertText: 'public static void main(String[] args) {\n    ${1:// code}\n}',
      insertTextRules: 4,
    },
    // Classes
    {
      label: 'class',
      kind: 27,
      documentation: 'Class definition',
      insertText: 'public class ${1:ClassName} {\n    ${2:// code}\n}',
      insertTextRules: 4,
    },
    // ArrayList operations
    {
      label: 'arraylist',
      kind: 27,
      documentation: 'ArrayList declaration',
      insertText: 'ArrayList<${1:Type}> ${2:list} = new ArrayList<>();',
      insertTextRules: 4,
    },
    {
      label: 'add',
      kind: 27,
      documentation: 'ArrayList add',
      insertText: '${1:list}.add(${2:item});',
      insertTextRules: 4,
    },
    {
      label: 'remove',
      kind: 27,
      documentation: 'ArrayList remove',
      insertText: '${1:list}.remove(${2:index});',
      insertTextRules: 4,
    },
    {
      label: 'get',
      kind: 27,
      documentation: 'ArrayList get',
      insertText: '${1:list}.get(${2:index})',
      insertTextRules: 4,
    },
    // Error handling
    {
      label: 'try',
      kind: 27,
      documentation: 'Try-catch block',
      insertText: 'try {\n    ${1:// code}\n} catch (${2:Exception} ${3:e}) {\n    ${4:// handle exception}\n}',
      insertTextRules: 4,
    },
  ],
  cpp: [
    // Output
    {
      label: 'cout',
      kind: 27,
      documentation: 'Console output',
      insertText: 'cout << ${1:value} << endl;',
      insertTextRules: 4,
    },
    {
      label: 'cin',
      kind: 27,
      documentation: 'Console input',
      insertText: 'cin >> ${1:variable};',
      insertTextRules: 4,
    },
    // Control flow
    {
      label: 'for',
      kind: 27,
      documentation: 'For loop',
      insertText: 'for (int ${1:i} = 0; ${1:i} < ${2:n}; ${1:i}++) {\n    ${3:// code}\n}',
      insertTextRules: 4,
    },
    {
      label: 'if',
      kind: 27,
      documentation: 'If statement',
      insertText: 'if (${1:condition}) {\n    ${2:// code}\n}',
      insertTextRules: 4,
    },
    {
      label: 'else',
      kind: 27,
      documentation: 'Else statement',
      insertText: 'else {\n    ${1:// code}\n}',
      insertTextRules: 4,
    },
    {
      label: 'while',
      kind: 27,
      documentation: 'While loop',
      insertText: 'while (${1:condition}) {\n    ${2:// code}\n}',
      insertTextRules: 4,
    },
    {
      label: 'switch',
      kind: 27,
      documentation: 'Switch statement',
      insertText: 'switch (${1:expression}) {\n    case ${2:value}:\n        ${3:// code}\n        break;\n    default:\n        ${4:// code}\n}',
      insertTextRules: 4,
    },
    // Functions
    {
      label: 'function',
      kind: 27,
      documentation: 'Function definition',
      insertText: '${1:void} ${2:functionName}(${3:parameters}) {\n    ${4:// code}\n}',
      insertTextRules: 4,
    },
    // Classes
    {
      label: 'class',
      kind: 27,
      documentation: 'Class definition',
      insertText: 'class ${1:ClassName} {\nprivate:\n    ${2:// members}\npublic:\n    ${3:// methods}\n};',
      insertTextRules: 4,
    },
    // Vector operations
    {
      label: 'vector',
      kind: 27,
      documentation: 'Vector declaration',
      insertText: 'vector<${1:int}> ${2:vectorName};',
      insertTextRules: 4,
    },
    {
      label: 'push_back',
      kind: 27,
      documentation: 'Vector push_back',
      insertText: '${1:vector}.push_back(${2:item});',
      insertTextRules: 4,
    },
    {
      label: 'pop_back',
      kind: 27,
      documentation: 'Vector pop_back',
      insertText: '${1:vector}.pop_back();',
      insertTextRules: 4,
    },
    // Error handling
    {
      label: 'try',
      kind: 27,
      documentation: 'Try-catch block',
      insertText: 'try {\n    ${1:// code}\n} catch (${2:exception}& ${3:e}) {\n    ${4:// handle exception}\n}',
      insertTextRules: 4,
    },
  ],
  c: [
    // Output
    {
      label: 'printf',
      kind: 27,
      documentation: 'Printf statement',
      insertText: 'printf("${1:format}\\n", ${2:args});',
      insertTextRules: 4,
    },
    {
      label: 'scanf',
      kind: 27,
      documentation: 'Scanf statement',
      insertText: 'scanf("${1:format}", &${2:variable});',
      insertTextRules: 4,
    },
    // Control flow
    {
      label: 'for',
      kind: 27,
      documentation: 'For loop',
      insertText: 'for (int ${1:i} = 0; ${1:i} < ${2:n}; ${1:i}++) {\n    ${3:// code}\n}',
      insertTextRules: 4,
    },
    {
      label: 'if',
      kind: 27,
      documentation: 'If statement',
      insertText: 'if (${1:condition}) {\n    ${2:// code}\n}',
      insertTextRules: 4,
    },
    {
      label: 'else',
      kind: 27,
      documentation: 'Else statement',
      insertText: 'else {\n    ${1:// code}\n}',
      insertTextRules: 4,
    },
    {
      label: 'while',
      kind: 27,
      documentation: 'While loop',
      insertText: 'while (${1:condition}) {\n    ${2:// code}\n}',
      insertTextRules: 4,
    },
    {
      label: 'switch',
      kind: 27,
      documentation: 'Switch statement',
      insertText: 'switch (${1:expression}) {\n    case ${2:value}:\n        ${3:// code}\n        break;\n    default:\n        ${4:// code}\n}',
      insertTextRules: 4,
    },
    // Functions
    {
      label: 'function',
      kind: 27,
      documentation: 'Function definition',
      insertText: '${1:void} ${2:functionName}(${3:parameters}) {\n    ${4:// code}\n}',
      insertTextRules: 4,
    },
    {
      label: 'main',
      kind: 27,
      documentation: 'Main function',
      insertText: 'int main() {\n    ${1:// code}\n    return 0;\n}',
      insertTextRules: 4,
    },
    // Struct
    {
      label: 'struct',
      kind: 27,
      documentation: 'Struct definition',
      insertText: 'struct ${1:StructName} {\n    ${2:// members}\n};',
      insertTextRules: 4,
    },
  ],
  go: [
    // Output
    {
      label: 'print',
      kind: 27,
      documentation: 'fmt.Print',
      insertText: 'fmt.Print(${1:value})',
      insertTextRules: 4,
    },
    {
      label: 'println',
      kind: 27,
      documentation: 'fmt.Println',
      insertText: 'fmt.Println(${1:value})',
      insertTextRules: 4,
    },
    {
      label: 'printf',
      kind: 27,
      documentation: 'fmt.Printf',
      insertText: 'fmt.Printf("${1:format}\\n", ${2:args})',
      insertTextRules: 4,
    },
    // Control flow
    {
      label: 'for',
      kind: 27,
      documentation: 'For loop',
      insertText: 'for ${1:i} := 0; ${1:i} < ${2:n}; ${1:i}++ {\n    ${3:// code}\n}',
      insertTextRules: 4,
    },
    {
      label: 'if',
      kind: 27,
      documentation: 'If statement',
      insertText: 'if ${1:condition} {\n    ${2:// code}\n}',
      insertTextRules: 4,
    },
    {
      label: 'else',
      kind: 27,
      documentation: 'Else statement',
      insertText: 'else {\n    ${1:// code}\n}',
      insertTextRules: 4,
    },
    // Functions
    {
      label: 'func',
      kind: 27,
      documentation: 'Function definition',
      insertText: 'func ${1:functionName}(${2:parameters}) ${3:returnType} {\n    ${4:// code}\n}',
      insertTextRules: 4,
    },
    {
      label: 'main',
      kind: 27,
      documentation: 'Main function',
      insertText: 'func main() {\n    ${1:// code}\n}',
      insertTextRules: 4,
    },
    // Struct
    {
      label: 'struct',
      kind: 27,
      documentation: 'Struct definition',
      insertText: 'type ${1:StructName} struct {\n    ${2:// fields}\n}',
      insertTextRules: 4,
    },
    // Slice operations
    {
      label: 'append',
      kind: 27,
      documentation: 'Append to slice',
      insertText: '${1:slice} = append(${1:slice}, ${2:value})',
      insertTextRules: 4,
    },
  ],
};
